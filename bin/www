#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rent-a-book:server');
var http = require('http');
var sequelize = require('../models').sequelize;
var models = require('../models');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

sequelize.sync().then(() => {
  console.log('Seqeulize: Sync successful.');
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
});

var p2pserver = require("socket.io-p2p-server").Server;
var ss = require("socket.io-stream");
// Set up the Socket.IO server
var io = require("socket.io")(server)
  .use(p2pserver)
  .use(function (socket, next) {
    // Wrap the express middleware
    app.sessionMiddleware(socket.request, {}, next);
  })
  .on("connection", function (socket) {
    if (socket.request.session.passport) {
      var userId = socket.request.session.passport.user;
      models.User.findOne({ where: { id: userId } })
        .then(user => { user.update({ status: 'active'}); });
      console.log("Your User ID is", userId);
    } else {
      console.log('No user logged in.');
    }

    socket.on('disconnect', function () {
      if (socket.request.session.passport) 
        var userId = socket.request.session.passport.user;
      models.User.findOne({ where: { id: userId } })
        .then(user => { user.update({ status: 'inactive' }); });
    });

    ss(socket).on("file", function (stream, data) {
      console.log(data);

      var parts = [];

      stream.on("data", function (data) {
        parts.push(data);
      });

      stream.on("end", function () {
        socket.broadcast.emit("file", parts);
      });

    });

    ss(socket).on("req-file", function (path) { 
      socket.broadcast.emit("req-file", path);
    });
  });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
  debug('Listening on ' + bind);
}
